{"ast":null,"code":"var _jsxFileName = \"C:\\\\FullstackClass\\\\Projects\\\\final-project\\\\thepeoplespurse\\\\client\\\\src\\\\components\\\\BarChartRace\\\\BarChart.js\";\nimport React from 'react';\nimport Bar from './Bar';\nimport \"./BarChartRace.css\";\nimport API from \"../../utils/axiosCalls\";\nconst classes = {\n  barChart: {\n    width: \"100%\",\n    position: \"relative\"\n  },\n  container: {\n    width: \"100%\"\n  }\n};\n\nclass BarChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: []\n    };\n\n    this.getHomeAgencyInfo = () => {\n      API.getHomeAgencyInfo() // .then(res => this.setState({ results: res.data.data }))\n      .then(function (response) {\n        console.log(response);\n        this.setState({\n          results: response.data.data\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.handleRaceButtonClick = event => {\n      //event.preventDefault();\n      this.getHomeAgencyInfo();\n    };\n\n    this.componentDidMount = () => {\n      if (this.props.start) {\n        var intervalId = setInterval(this.update, this.props.timeout + this.props.delay);\n        this.setState({\n          intervalId: intervalId\n        });\n      }\n    };\n\n    this.componentWillUnmount = () => {\n      clearInterval(this.state.intervalId);\n    };\n\n    this.update = () => {\n      if (this.state.idx + 1 === this.props.timeline.length) {\n        clearInterval(this.state.intervalId);\n        return;\n      }\n\n      this.setState(prevState => {\n        let [currRank, maxVal] = this.sortAxis(prevState.idx + 1);\n        return {\n          idx: prevState.idx + 1,\n          prevRank: prevState.currRank,\n          currRank: currRank,\n          maxVal: maxVal\n        };\n      });\n    };\n\n    this.sortAxis = (i, descending) => {\n      if (descending === undefined) descending = true;\n      let toSort = Object.keys(this.props.data).map(name => {\n        return {\n          name: name,\n          val: this.props.data[name][i]\n        };\n      });\n      toSort.sort((left, right) => descending ? left.val < right.val : left.val > right.val);\n      toSort = toSort.slice(0, this.maxItems);\n      const maxVal = Math.max.apply(Math, toSort.map(item => item.val));\n      return [toSort.reduce((ret, item, idx) => ({ ...ret,\n        ...{\n          [item.name]: idx\n        }\n      }), {}), maxVal];\n    };\n\n    this.getInfoFromRank = name => {\n      const currIdx = this.state.idx;\n      const prevIdx = currIdx > 0 ? currIdx - 1 : 0;\n      const value = this.props.data[name][currIdx];\n      const hidden = this.state.currRank[name] === undefined;\n      const currStyle = { ...this.props.barStyle,\n        marginTop: `calc(${this.state.currRank[name]} * ${this.barHeight})`,\n        width: `${100 * this.props.data[name][currIdx] / this.state.maxVal}%`,\n        backgroundColor: this.props.colors[name]\n      };\n      const prevStyle = { ...this.props.barStyle,\n        marginTop: `calc(${this.state.prevRank[name]} * ${this.barHeight})`,\n        width: `${100 * this.props.data[name][prevIdx] / this.state.maxVal}%`,\n        backgroundColor: this.props.colors[name]\n      };\n      return [value, hidden, currStyle, prevStyle];\n    };\n\n    this.barHeight = `calc(${props.barStyle.height} + ${props.barStyle.marginTop})`;\n    this.nItmes = Object.keys(this.props.data).length;\n    this.maxItems = props.maxItems <= this.nItmes ? props.maxItems : this.nItmes;\n    this.barChartStyle = {\n      height: `calc(${this.maxItems} * ${this.barHeight})`\n    };\n    let [initRank, _maxVal] = this.sortAxis(0);\n    this.state = {\n      idx: 0,\n      prevRank: initRank,\n      currRank: initRank,\n      maxVal: _maxVal,\n      started: props.start\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.start) {\n      var intervalId = setInterval(this.update, this.props.timeout + this.props.delay);\n      this.setState({\n        intervalId: intervalId\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"barChartRace-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, this.props.timeline[this.state.idx]), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }, Object.keys(this.props.data).map(name => {\n      const [value, hidden, currStyle, prevStyle] = this.getInfoFromRank(name);\n      if (hidden) return /*#__PURE__*/React.createElement(\"div\", {\n        key: name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 49\n        }\n      });\n      return /*#__PURE__*/React.createElement(Bar, {\n        name: name,\n        value: value,\n        label: this.props.labels[name],\n        currStyle: currStyle,\n        prevStyle: prevStyle,\n        key: name,\n        timeout: this.props.timeout,\n        textBoxStyle: this.props.textBoxStyle,\n        width: this.props.width,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 33\n        }\n      });\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleRaceButtonClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, \"Start Race!\"));\n  }\n\n}\n\nexport default BarChart;","map":{"version":3,"sources":["C:/FullstackClass/Projects/final-project/thepeoplespurse/client/src/components/BarChartRace/BarChart.js"],"names":["React","Bar","API","classes","barChart","width","position","container","BarChart","Component","constructor","props","state","results","getHomeAgencyInfo","then","response","console","log","setState","data","catch","err","handleRaceButtonClick","event","componentDidMount","start","intervalId","setInterval","update","timeout","delay","componentWillUnmount","clearInterval","idx","timeline","length","prevState","currRank","maxVal","sortAxis","prevRank","i","descending","undefined","toSort","Object","keys","map","name","val","sort","left","right","slice","maxItems","Math","max","apply","item","reduce","ret","getInfoFromRank","currIdx","prevIdx","value","hidden","currStyle","barStyle","marginTop","barHeight","backgroundColor","colors","prevStyle","height","nItmes","barChartStyle","initRank","started","componentWillReceiveProps","nextProps","render","labels","textBoxStyle"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Bar from './Bar';\nimport \"./BarChartRace.css\";\nimport API from \"../../utils/axiosCalls\";\n\nconst classes = {\n    barChart: {\n        width: \"100%\",\n        position: \"relative\",\n    },\n    container: {\n        width: \"100%\",\n    }\n}\n\nclass BarChart extends React.Component {\n    state = {\n        results: []\n    };\n\n    getHomeAgencyInfo = () => {\n        API.getHomeAgencyInfo()\n            // .then(res => this.setState({ results: res.data.data }))\n            .then(function (response) {\n                console.log(response);\n                this.setState({ results: response.data.data })\n            })\n            .catch(err => console.log(err));\n    };\n\n    handleRaceButtonClick = event => {\n        //event.preventDefault();\n        this.getHomeAgencyInfo();\n    };\n\n    constructor(props) {\n        super(props);\n        this.barHeight = `calc(${props.barStyle.height} + ${props.barStyle.marginTop})`;\n        this.nItmes = Object.keys(this.props.data).length;\n        this.maxItems = props.maxItems <= this.nItmes ? props.maxItems : this.nItmes;\n        this.barChartStyle = {\n            height: `calc(${this.maxItems} * ${this.barHeight})`,\n        };\n        let [initRank, maxVal] = this.sortAxis(0);\n        this.state = {\n            idx: 0,\n            prevRank: initRank,\n            currRank: initRank,\n            maxVal: maxVal,\n            started: props.start\n        };\n    }\n\n    componentDidMount = () => {\n        if (this.props.start) {\n            var intervalId = setInterval(this.update, this.props.timeout + this.props.delay);\n            this.setState({ intervalId: intervalId });\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.start) {\n            var intervalId = setInterval(this.update, this.props.timeout + this.props.delay);\n            this.setState({ intervalId: intervalId });\n        }\n    }\n\n    componentWillUnmount = () => {\n        clearInterval(this.state.intervalId);\n    }\n\n    update = () => {\n        if (this.state.idx + 1 === this.props.timeline.length) {\n            clearInterval(this.state.intervalId);\n            return;\n        }\n        this.setState(prevState => {\n            let [currRank, maxVal] = this.sortAxis(prevState.idx + 1);\n            return {\n                idx: prevState.idx + 1,\n                prevRank: prevState.currRank,\n                currRank: currRank,\n                maxVal: maxVal,\n            }\n        });\n    }\n\n    sortAxis = (i, descending) => {\n        if (descending === undefined) descending = true;\n        let toSort = Object.keys(this.props.data).map(name => {\n            return {\n                name: name,\n                val: this.props.data[name][i]\n            };\n        });\n        toSort.sort((left, right) => descending ? left.val < right.val : left.val > right.val);\n        toSort = toSort.slice(0, this.maxItems);\n        const maxVal = Math.max.apply(Math, toSort.map(item => item.val));\n        return [toSort.reduce((ret, item, idx) => ({\n            ...ret, ...{ [item.name]: idx }\n        }), {}), maxVal];\n    }\n\n    getInfoFromRank = name => {\n        const currIdx = this.state.idx;\n        const prevIdx = (currIdx > 0 ? currIdx - 1 : 0);\n        const value = this.props.data[name][currIdx];\n        const hidden = (this.state.currRank[name] === undefined);\n        const currStyle = {\n            ...this.props.barStyle,\n            marginTop: `calc(${this.state.currRank[name]} * ${this.barHeight})`,\n            width: `${100 * this.props.data[name][currIdx] / this.state.maxVal}%`,\n            backgroundColor: this.props.colors[name],\n        };\n        const prevStyle = {\n            ...this.props.barStyle,\n            marginTop: `calc(${this.state.prevRank[name]} * ${this.barHeight})`,\n            width: `${100 * this.props.data[name][prevIdx] / this.state.maxVal}%`,\n            backgroundColor: this.props.colors[name],\n        };\n        return [value, hidden, currStyle, prevStyle];\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"barChartRace-title\">\n                    {this.props.timeline[this.state.idx]}\n                </div>\n                <div>\n                    {\n                        Object.keys(this.props.data).map(name => {\n                            const [value, hidden, currStyle, prevStyle] = this.getInfoFromRank(name);\n                            if (hidden) return (<div key={name}></div>);\n                            return (\n                                <Bar\n                                    name={name}\n                                    value={value}\n                                    label={this.props.labels[name]}\n                                    currStyle={currStyle}\n                                    prevStyle={prevStyle}\n                                    key={name}\n                                    timeout={this.props.timeout}\n                                    textBoxStyle={this.props.textBoxStyle}\n                                    width={this.props.width}\n                                />\n                            )\n                        })\n                    }\n                </div>\n                <button onClick={this.handleRaceButtonClick}>Start Race!</button>\n            </div>\n        );\n    }\n}\n\nexport default BarChart;"]},"metadata":{},"sourceType":"module"}
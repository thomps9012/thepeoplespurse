{"ast":null,"code":"var _jsxFileName = \"C:\\\\FullstackClass\\\\Projects\\\\final-project\\\\thepeoplespurse\\\\client\\\\src\\\\components\\\\BarChartRace\\\\BarChart.js\";\nimport React from 'react';\nimport Bar from './Bar';\nimport \"./BarChartRace.css\";\nconst classes = {\n  barChart: {\n    width: \"100%\",\n    position: \"relative\"\n  },\n  container: {\n    width: \"100%\"\n  }\n};\n\nclass BarChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      if (this.props.start) {\n        var intervalId = setInterval(this.update, this.props.timeout + this.props.delay);\n        this.setState({\n          intervalId: intervalId\n        });\n      }\n    };\n\n    this.componentWillUnmount = () => {\n      clearInterval(this.state.intervalId);\n    };\n\n    this.update = () => {\n      if (this.state.idx + 1 === this.props.timeline.length) {\n        clearInterval(this.state.intervalId);\n        return;\n      }\n\n      this.setState(prevState => {\n        let [currRank, maxVal] = this.sortAxis(prevState.idx + 1);\n        return {\n          idx: prevState.idx + 1,\n          prevRank: prevState.currRank,\n          currRank: currRank,\n          maxVal: maxVal\n        };\n      });\n    };\n\n    this.sortAxis = (i, descending) => {\n      if (descending === undefined) descending = true;\n      let toSort = Object.keys(this.props.data).map(name => {\n        return {\n          name: name,\n          val: this.props.data[name][i]\n        };\n      });\n      toSort.sort((left, right) => descending ? left.val < right.val : left.val > right.val);\n      toSort = toSort.slice(0, this.maxItems);\n      const maxVal = Math.max.apply(Math, toSort.map(item => item.val));\n      return [toSort.reduce((ret, item, idx) => ({ ...ret,\n        ...{\n          [item.name]: idx\n        }\n      }), {}), maxVal];\n    };\n\n    this.getInfoFromRank = name => {\n      const currIdx = this.state.idx;\n      const prevIdx = currIdx > 0 ? currIdx - 1 : 0;\n      const value = this.props.data[name][currIdx];\n      const hidden = this.state.currRank[name] === undefined;\n      const currStyle = { ...this.props.barStyle,\n        marginTop: `calc(${this.state.currRank[name]} * ${this.barHeight})`,\n        width: `${100 * this.props.data[name][currIdx] / this.state.maxVal}%`,\n        backgroundColor: this.props.colors[name]\n      };\n      const prevStyle = { ...this.props.barStyle,\n        marginTop: `calc(${this.state.prevRank[name]} * ${this.barHeight})`,\n        width: `${100 * this.props.data[name][prevIdx] / this.state.maxVal}%`,\n        backgroundColor: this.props.colors[name]\n      };\n      return [value, hidden, currStyle, prevStyle];\n    };\n\n    this.barHeight = `calc(${props.barStyle.height} + ${props.barStyle.marginTop})`;\n    this.nItmes = Object.keys(this.props.data).length;\n    this.maxItems = props.maxItems <= this.nItmes ? props.maxItems : this.nItmes;\n    this.barChartStyle = {\n      height: `calc(${this.maxItems} * ${this.barHeight})`\n    };\n    let [initRank, _maxVal] = this.sortAxis(0);\n    this.state = {\n      idx: 0,\n      prevRank: initRank,\n      currRank: initRank,\n      maxVal: _maxVal,\n      started: props.start\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.start) {\n      var intervalId = setInterval(this.update, this.props.timeout + this.props.delay);\n      this.setState({\n        intervalId: intervalId\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"barChartRace-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, this.props.timeline[this.state.idx]), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }, Object.keys(this.props.data).map(name => {\n      const [value, hidden, currStyle, prevStyle] = this.getInfoFromRank(name);\n      if (hidden) return /*#__PURE__*/React.createElement(\"div\", {\n        key: name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 49\n        }\n      });\n      return /*#__PURE__*/React.createElement(Bar, {\n        name: name,\n        value: value,\n        label: this.props.labels[name],\n        currStyle: currStyle,\n        prevStyle: prevStyle,\n        key: name,\n        timeout: this.props.timeout,\n        textBoxStyle: this.props.textBoxStyle,\n        width: this.props.width,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 33\n        }\n      });\n    })));\n  }\n\n}\n\nexport default BarChart;","map":{"version":3,"sources":["C:/FullstackClass/Projects/final-project/thepeoplespurse/client/src/components/BarChartRace/BarChart.js"],"names":["React","Bar","classes","barChart","width","position","container","BarChart","Component","constructor","props","componentDidMount","start","intervalId","setInterval","update","timeout","delay","setState","componentWillUnmount","clearInterval","state","idx","timeline","length","prevState","currRank","maxVal","sortAxis","prevRank","i","descending","undefined","toSort","Object","keys","data","map","name","val","sort","left","right","slice","maxItems","Math","max","apply","item","reduce","ret","getInfoFromRank","currIdx","prevIdx","value","hidden","currStyle","barStyle","marginTop","barHeight","backgroundColor","colors","prevStyle","height","nItmes","barChartStyle","initRank","started","componentWillReceiveProps","nextProps","render","labels","textBoxStyle"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Bar from './Bar';\nimport \"./BarChartRace.css\";\n\nconst classes = {\n    barChart: {\n        width: \"100%\",\n        position: \"relative\",\n    },\n    container: {\n        width: \"100%\",\n    }\n}\nclass BarChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.barHeight = `calc(${props.barStyle.height} + ${props.barStyle.marginTop})`;\n        this.nItmes = Object.keys(this.props.data).length;\n        this.maxItems = props.maxItems <= this.nItmes ? props.maxItems : this.nItmes;\n        this.barChartStyle = {\n            height: `calc(${this.maxItems} * ${this.barHeight})`,\n        };\n        let [initRank, maxVal] = this.sortAxis(0);\n        this.state = {\n            idx: 0,\n            prevRank: initRank,\n            currRank: initRank,\n            maxVal: maxVal,\n            started: props.start\n        };\n    }\n\n    componentDidMount = () => {\n        if (this.props.start) {\n            var intervalId = setInterval(this.update, this.props.timeout + this.props.delay);\n            this.setState({ intervalId: intervalId });\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.start) {\n            var intervalId = setInterval(this.update, this.props.timeout + this.props.delay);\n            this.setState({ intervalId: intervalId });\n        }\n    }\n\n    componentWillUnmount = () => {\n        clearInterval(this.state.intervalId);\n    }\n\n    update = () => {\n        if (this.state.idx + 1 === this.props.timeline.length) {\n            clearInterval(this.state.intervalId);\n            return;\n        }\n        this.setState(prevState => {\n            let [currRank, maxVal] = this.sortAxis(prevState.idx + 1);\n            return {\n                idx: prevState.idx + 1,\n                prevRank: prevState.currRank,\n                currRank: currRank,\n                maxVal: maxVal,\n            }\n        });\n    }\n\n    sortAxis = (i, descending) => {\n        if (descending === undefined) descending = true;\n        let toSort = Object.keys(this.props.data).map(name => {\n            return {\n                name: name,\n                val: this.props.data[name][i]\n            };\n        });\n        toSort.sort((left, right) => descending ? left.val < right.val : left.val > right.val);\n        toSort = toSort.slice(0, this.maxItems);\n        const maxVal = Math.max.apply(Math, toSort.map(item => item.val));\n        return [toSort.reduce((ret, item, idx) => ({\n            ...ret, ...{ [item.name]: idx }\n        }), {}), maxVal];\n    }\n\n    getInfoFromRank = name => {\n        const currIdx = this.state.idx;\n        const prevIdx = (currIdx > 0 ? currIdx - 1 : 0);\n        const value = this.props.data[name][currIdx];\n        const hidden = (this.state.currRank[name] === undefined);\n        const currStyle = {\n            ...this.props.barStyle,\n            marginTop: `calc(${this.state.currRank[name]} * ${this.barHeight})`,\n            width: `${100 * this.props.data[name][currIdx] / this.state.maxVal}%`,\n            backgroundColor: this.props.colors[name],\n        };\n        const prevStyle = {\n            ...this.props.barStyle,\n            marginTop: `calc(${this.state.prevRank[name]} * ${this.barHeight})`,\n            width: `${100 * this.props.data[name][prevIdx] / this.state.maxVal}%`,\n            backgroundColor: this.props.colors[name],\n        };\n        return [value, hidden, currStyle, prevStyle];\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"barChartRace-title\">\n                    {this.props.timeline[this.state.idx]}\n                </div>\n                <div>\n                    {\n                        Object.keys(this.props.data).map(name => {\n                            const [value, hidden, currStyle, prevStyle] = this.getInfoFromRank(name);\n                            if (hidden) return (<div key={name}></div>);\n                            return (\n                                <Bar\n                                    name={name}\n                                    value={value}\n                                    label={this.props.labels[name]}\n                                    currStyle={currStyle}\n                                    prevStyle={prevStyle}\n                                    key={name}\n                                    timeout={this.props.timeout}\n                                    textBoxStyle={this.props.textBoxStyle}\n                                    width={this.props.width}\n                                />\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BarChart;"]},"metadata":{},"sourceType":"module"}
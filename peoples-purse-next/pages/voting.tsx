import { useQuery, useMutation, gql } from '@apollo/client';
import { useState } from 'react';
import DeptCards from '../components/deptCards';
import { baseBudget } from '../../assets/deptVoting/baseBudget';
import LoggedOut from '../components/loggedOut';
import BudgetOutput from '../components/budgetOutput';
import Head from 'next/head';

const GET_CLASSES = gql`
query Query {
  classes {
    _id
    class_code
  }
}`;

const CAST_VOTE = gql`
mutation Mutation($input: CastVote!) {
  castVote(input: $input)
}
`;
export default function VotingPage() {
  const [budget, setBudget] = useState(baseBudget)
  const [classCode, setClass] = useState('')

  const { loading, data } = useQuery(GET_CLASSES);
  const [castVote, { error }] = useMutation(CAST_VOTE);

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error :({JSON.stringify(error)}</p>;

  if (!data) { return <LoggedOut /> }
  const userClasses = data.classes;
  const resetBudget = () => window.location.reload();
  return (
    <div className='container'>
      <Head>
        <title>the People's Purse</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"></link>
      </Head>
      <select onChange={(e: any) => setClass(e.target.value)}>
        {userClasses ?
          userClasses.map((classCode: any) => {
            return (
              <option key={classCode._id}>
                {classCode.class_code}
              </option>
            )
          }) :
          <option value=''>No Joined Classes</option>
        }
      </select>
      <div style={{ display: 'flex', flexWrap: 'wrap-reverse', justifyContent: 'space-evenly' }}>
        <BudgetOutput budget={budget} />
        <a id='resetBtn' className="waves-effect waves-light btn-large" onClick={resetBudget}><i className="material-icons left">restart_alt</i>Reset Budget</a>
      </div>
      <DeptCards
        style={{ display: 'flex-wrap' }}
        budget={budget}
        updateBudget={setBudget}
      />
      <div style={{ display: 'flex', justifyContent: 'center' }}>

        <a
          className='waves-effect waves-light btn-large'
          id="voteSubmit"
          onClick={async (e: any) => {
            e.preventDefault();
            const voteResponse = await castVote({
              variables: {
                input: {
                  budget: budget,
                  class_code: classCode
                }
              }
            })
            console.log(voteResponse)
          }
          }
        >
          <i className='material-icons right'>how_to_vote</i>
          Cast Vote
        </a>
      </div>
    </div>
  )
}